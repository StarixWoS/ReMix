#ifndef USER_HPP
#define USER_HPP

#include "prototypes.hpp"

//Required Qt Includes.
#include <QDialog>
#include <QMutex>

namespace Ui {
    class User;
}

class User : public QDialog
{
    Q_OBJECT

    static QSortFilterProxyModel* tblProxy;
    static QStandardItemModel* tblModel;
    static QSettings* userData;
    static User* instance;
    static QMutex mutex;

    static const QMap<UKeys, QString> uKeys;
    static const QMap<PunishDurations, QString> punishDurations;
    static const QMap<GMRanks, QString> adminRanks;

    public:
        explicit User(QWidget* parent = nullptr);
        ~User() override;

        static User* getInstance();
        static void setInstance(User* value);

        static QString requestReason(QWidget* parent = nullptr);
        static PunishDurations requestDuration(QWidget* parent = nullptr);
        static GMRanks requestRank(QWidget* parent);

        static QSettings* getUserData();
        static void setUserData(const QSettings* value);
        static void setData(const QString& key, const QString& subKey, const QVariant& value);

        static QVariant getData(const QString& key, const QString& subKey);

        static bool makeAdmin(const QString& sernum, const QString& pwd);

        static bool getIsAdmin(const QString& sernum);
        static bool getHasPassword(const QString& sernum);
        static bool cmpAdminPwd(const QString& sernum, const QString& value);

        static qint32 getAdminRank(const QString& sernum);
        static void setAdminRank(const QString& sernum, const GMRanks& rank);
        static void setAdminRank(QSharedPointer<Player> plr, const GMRanks& rank, const bool& remote);

        static quint64 getIsPunished(const PunishTypes& punishType, const QString& value, const PunishTypes& type);
        static void removePunishment(const QString& value, const PunishTypes& punishType, const PunishTypes& type);
        static void logPunishmentRemoval(const QString& sernum, const quint64& punishDate, const quint64& punishDuration,
                                         const QString& punishReason, const PunishTypes& type);

        static bool addBan(QSharedPointer<Player> admin, QSharedPointer<Player> target, const QString& reason, const bool remote,
                           const PunishDurations duration);
        static bool addBan(QSharedPointer<Player> target, const QString& reason, const PunishDurations& duration);

        static bool addBanImpl(QSharedPointer<Player> target, const QString& reason, const PunishDurations& duration);

        static bool addMute(QSharedPointer<Player> admin, QSharedPointer<Player> target, const QString& reason, const bool& remote, const bool& autoMute,
                            const PunishDurations& duration);
        static bool addMute(QSharedPointer<Player> target, const QString& reason, const bool& remote, const PunishDurations& duration);

        static bool addMuteImpl(QSharedPointer<Player> target, const QString& reason, const PunishDurations& duration);

        static QString getMuteReason(const QString& serNum);

        static void updateCallCount(const QString& serNum);

        static QByteArray getBIOData(const QString& sernum);

        static bool validateSalt(const QString& salt);
        static QString genPwdSalt(const qint32& length);

    private:
        QModelIndex findModelIndex(const QString& value, const UserCols& col);
        void loadUserInfo();
        void updateRowData(const qint32& row, const qint32& col, const QVariant& data);

    signals:
        void mutedSerNumDurationSignal(const QString& sernum, const quint64& duration, const QString& reason);
        void insertLogSignal(const QString& source, const QString& message, const LKeys& type, const bool& logToFile, const bool& newLine) const;
        void removePunishmentSignal(const QString& value, const PunishTypes& type);
        void setAdminRankSignal(const QString& hexSerNum, const GMRanks& rank);

    public slots:
        static void logBIOSlot(const QString& serNum, const QHostAddress& ip, const QString& bio);

    private slots:
        void updateDataValueSlot(const QModelIndex& index, const QModelIndex&, const QVector<int>& = QVector<int> ());

    private:
        Ui::User* ui;
};

#endif // USER_HPP
