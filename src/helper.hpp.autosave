
#ifndef PREFERENCES_HPP
#define PREFERENCES_HPP

#include "prototypes.hpp"

//Required Qt Includes.
#include <QInputDialog>
//#include <QtCore>

class Helper
{
    static const QList<qint32> blueCodedList;
    static const QMap<ByteUnits, QString> byteUnits;

    public:
        static QInputDialog* createInputDialog(QWidget* parent, const QString& label, const QInputDialog::InputMode& mode, const int& width, const int& height);

        template<typename T>
        static QString intToStr(const T& val, const IntBase& base = IntBase::DEC, const IntFills& fill = IntFills::Bit, const QChar& filler = '0')
        {
            qDebug() << *fill << *base;
            QString str{ "%1" };
                    str = str.arg( ( val & 0xffffffff ), *fill, *base, filler ).toUpper();

            if ( str.length() > 8 )
                str = str.mid( str.length() - 8 );

            return str;
        }
        static qint32 strToInt(const QString& str, const IntBase& base = IntBase::HEX);
        static QString intSToStr(const QString& val, const int& base = 16, const int& fill = 0, QChar filler = '0');
        static QString getStrStr(const QString& str, const QString& indStr, const QString& mid, const QString& left);

        static void stripNewlines(QString& string);
        static QString stripSerNumHeader(const QString& sernum);
        static QString sanitizeSerNum(const QString& value);
        static QString serNumToHexStr(QString sernum, const IntFills& fillAmt = IntFills::DblWord );
        static QString serNumToIntStr(const QString& sernum, const bool& isHex = false);
        static qint32 serNumToInt(const QString& sernum, const bool& isHex = false);

        static bool isBlueCodedSerNum(const qint32& sernum);

        static bool confirmAction(QWidget* parent, const QString& title, const QString& prompt);
        static qint32 warningMessage(QWidget* parent, const QString& title, const QString& prompt);
        static QString getTextResponse(QWidget* parent, const QString& title, const QString& prompt, const QString& defaultInput, bool* ok,
                                       const MessageBox& type);
        static qint32 getIntResponse(QWidget* parent, const QString& title, const QString& prompt, const qint32& defaultValue,
                                     const qint32& maxValue, const qint32& minValue, bool* ok);
        static QString getDisconnectReason(QWidget* parent = nullptr);

        static QString hashPassword(const QString& password);

        static QHostAddress getPrivateIP();

        static bool strStartsWithStr(const QString& strA, const QString& strB);
        static bool strContainsStr(const QString& strA, const QString& strB);
        static bool cmpStrings(const QString& strA, const QString& strB );
        static qint32 getStrIndex(const QString& strA, const QString& strB);
        static QString getTimeAsString(const quint64& time = 0);
        static QString getTimeFormat(const qint64& time);
        static qint64 getTimeIntFormat(const qint64& time, const TimeFormat& format);

        static qint32 sanitizeToFriendlyUnits(const quint64& bytes, QString& retVal, QString& unit);
        static qint32 sanitizeFriendlyPrecision(const ByteUnits& unit);
};

#endif // PREFERENCES_HPP
